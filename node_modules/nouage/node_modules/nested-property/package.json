{
  "name": "nested-property",
  "description": "Read, write or test a data structure's nested property via a string like 'my.nested.property'. It works through arrays and objects.'",
  "version": "0.0.6",
  "homepage": "https://github.com/cosmosio/nested-property",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/cosmosio/nested-property/master/LICENSE"
    }
  ],
  "files": [
    "LICENSE",
    "index.js"
  ],
  "author": {
    "name": "Olivier Scherrer",
    "email": "pode.fr@gmail.com"
  },
  "keywords": [
    "nested",
    "property",
    "object",
    "array",
    "read",
    "write",
    "get",
    "set"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:cosmosio/nested-property.git"
  },
  "bugs": {
    "url": "https://github.com/cosmosio/nested-property/issues"
  },
  "scripts": {
    "test": "mocha"
  },
  "main": "index.js",
  "devDependencies": {
    "chai": "~1.9.1",
    "mocha": "~1.18.2",
    "sinon": "~1.12.2"
  },
  "_id": "nested-property@0.0.6",
  "dist": {
    "shasum": "3c5b79651146ae17fbb901aa29ab8903fb1b09e1",
    "tarball": "http://registry.npmjs.org/nested-property/-/nested-property-0.0.6.tgz"
  },
  "_from": "nested-property@0.0.6",
  "_npmVersion": "1.3.24",
  "_npmUser": {
    "name": "podefr",
    "email": "pode.fr@gmail.com"
  },
  "maintainers": [
    {
      "name": "podefr",
      "email": "pode.fr@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "3c5b79651146ae17fbb901aa29ab8903fb1b09e1",
  "_resolved": "https://registry.npmjs.org/nested-property/-/nested-property-0.0.6.tgz",
  "readme": "Nested property\n=============\n\nRead, write or test a data structure's nested property via a string like 'my.nested.property'. It works through arrays and objects.\n\nInstallation\n============\n\n```bash\nnpm install nested-property\n```\n\nHow to use\n==========\n\nRequire nested-property:\n\n```bash\nvar nestedProperty = require(\"nested-property\");\n```\n\n__You can get a nested property from an object:__\n\n```js\nvar object = {\n  a: {\n    b: {\n      c: {\n        d: 5\n      }\n    }\n  }\n};\n\nnestedProperty.get(object, \"a\"); // returns object.a\nnestedProperty.get(object, \"a.b.c\"); // returns object.a.b.c\nnestedProperty.get(object, \"a.b.c.d\"); // returns 5\nnestedProperty.get(object, \"a.d.c\"); // returns undefined\nnestedProperty.get(object); // returns object\nnestedProperty.get(null); // returns null\n```\n\nIt also works through arrays:\n\n```js\nvar array = [{\n  a: {\n    b: [0, 1]\n  }\n  }];\n\nnestedProperty.get(array, \"0\"); // returns array[0]\nnestedProperty.get(array, \"0.a.b\"); // returns array[0].a.b\nnestedProperty.get(array, \"0.a.b.0\"); // returns 0\nnestedProperty.get(array, \"1.a.b.c\"); // returns undefined\n```\n\n__You can set a nested property on an object:__\n\n```js\nvar object = {\n  a: {\n    b: {\n      c: {\n        d: 5\n      }\n    }\n  }\n};\n\nnestedProperty.set(object, \"a\", 1); // object.a == 1\nnestedProperty.set(object, \"a.b.c\", 1337); // object.a.b.c == 1337\nnestedProperty.set(object, \"e.f.g\", 1); // object.e.f.g == 1, it creates the missing objects!\nnestedProperty.set(object); // returns object\nnestedProperty.set(null); // returns null\n```\n\nYou can also set a nested property through arrays:\n\n```js\nvar array = [\n {\n   a: [0, 1]\n }\n];\n\nnestedProperty.set(array, \"0.a.0\", 10); // array[0].a[0] == 10\nnestedProperty.set(array, \"0.b.c\", 1337); // array[0].b.c == 1337\n```\n\nCaveat!\n\n```js\nvar object = {};\nnestedProperty.set(object, \"0.1.2\", \"new object\");\n\n// will not create arrays, but objects such as:\n{\n  \"0\": {\n    \"1\": {\n      \"2\": \"new object\"\n    }\n  }  \n}\n```\n\n__You can also test if a data structure has a nested property:__\n\n```js\nvar array = [\n {\n   a: [0, 1]\n }\n];\n\nnestedProperty.has(array, \"0.a\"); // true\nnestedProperty.has(array, \"0.a.1\"); // true\nnestedProperty.has(array, \"0.a.2\"); // false\nnestedProperty.has(array, \"1.a.0\"); // false\n```\n\nThe example shows that it works through array, but of course, plain objects are fine too.\n\nIf it must be a \"own\" property (i.e. not in the prototype chain) you can use the own option:\n\n```js\nfunction DataStructure() {}\nDataStructure.prototype.prop = true;\n\nvar obj = new DataStructure();\n\nnestedProperty.has(obj, \"prop\", { own: true}); // false\nnestedProperty.has(obj, \"prop\"); // true\n```\n\nAlternatively, you can use the hasOwn function:\n\n```js\nvar obj = Object.create({prop: true});\n\nnestedProperty.hasOwn(obj, \"prop\"); // false\n```\n\n___And finally, you can test if an object is on the path to a nested property:___\n\n```js\nvar obj = {\n    nested: [\n        {\n            property: true\n        }\n    ]\n};\n\nnestedProperty.isIn(obj, \"nested.0.property\", obj); // true\nnestedProperty.isIn(obj, \"nested.0.property\", obj.nested); // true\nnestedProperty.isIn(obj, \"nested.0.property\", obj.nested[0]); // true\n\nnestedProperty.isIn(obj, \"nested.0.property\", {}); // false\n```\n\nThe path doesn't have to be valid to return true:\n\n```js\nnestedProperty.isIn(obj, \"nested.0.property.foo.bar.path\", obj.nested[0]); // true\n```\n\nUnless the `validPath` option is set to `true`:\n\n```js\nnestedProperty.isIn(obj, \"nested.0.property.foo.bar.path\", obj.nested[0], { validPath: true }); // false\n```\n\nNote that if instead of an object you give it the value of the nested property, it'll return true:\n\n```js\nnestedProperty.isIn(obj, \"nested.0.property\", obj.nested[0].property); // true\nnestedProperty.isIn(obj, \"nested.0.property\", true); // true\n```\n\nCHANGELOG\n=========\n\n### 0.0.6 - 01 MAR 2015\n\n* Fix a bug where an invalid path to search an object into is invalid and the isInNestedProperty would throw an error instead of return false\n\n### 0.0.5 - 19 JAN 2015\n\n* Add isIn, to tell if an object is on the path to a nested property.\n\n### 0.0.4 - 15 JAN 2015\n\n* Add {own: true} option to .has to ensure that a nested property isn't coming from the prototype chain\n* Add hasOwn, that calls .has with the {own: true} option\n\n### 0.0.3 - 14 JAN 2015\n\n* Add has with tests and documentation\n\nLICENSE\n=======\n\nMIT\n",
  "readmeFilename": "README.md"
}
